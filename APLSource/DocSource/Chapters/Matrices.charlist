# Chapter 3.5: Matrices 

> In which the symbols `⍉ ⊖ . ∘` are introduced. 
> Outer product, (maybe inner product - matrices are multiplication)
  
The left argument to `reshape` may be a two-item vector (and even longer, as we shall see later):

~~~
        m←4 5⍴⍳20
        m
 1  2  3  4  5
 6  7  8  9 10
11 12 13 14 15
16 17 18 19 20   
~~~

The result is neither a scalar nor a vector, but a table or, more formally, a **matrix** of 4 rows and 5 columns. 
Scalar, vector, and matrix are the three most commonly used APL array shapes, but
APL can create and manipulate arrays of many more dimensions.

Just as scalar extension applies to vectors, it applies to matrices, so we can multiply an entire
matrix by 10: 

~~~
      10×m
 10  20  30  40  50
 60  70  80  90 100
110 120 130 140 150
160 170 180 190 200
~~~

or mark the items that are greater than 7:

~~~
      m>7
0 0 0 0 0
0 0 1 1 1
1 1 1 1 1
1 1 1 1 1
~~~

The structural functions  `take` (`↑`) can extract rows and columns


Reverse also works 

~~~
       ⌽m
 5  4  3  2  1
10  9  8  7  6
15 14 13 12 11
20 19 18 17 16
~~~

reversing the columns of the matrix, just like it reverses the items of a vector. 

The rows of a matrix may be reversed using the `reverse first` function:

~~~
      ⊖m
16 17 18 19 20
11 12 13 14 15
 6  7  8  9 10
 1  2  3  4  5
~~~

> A matrix has two dimensions or axes. The rows are the first dimension, and the columns are the second
dimension. The glyphs `⌽` is   

The `transpose` function (`⌽`) rotates a matrix along its diagonal, turning rows into columns
and columns into rows:

~~~
      ⍉m
1  6 11 16
2  7 12 17
3  8 13 18
4  9 14 19
5 10 15 20
~~~
     
        
     MNOP     
ABCD QRST     
EFGH UVWX  
IJKL       
    2 3 4⍴⎕A


   ┌────┐ 
   │MNOP│
┌────┐ST│
│X0X │WX│
│EFG │──┘
│IJK │
└────┘  


│MNOP│
│QRST│
│UVWX│
└────┘    
    
    

